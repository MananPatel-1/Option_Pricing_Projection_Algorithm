from math import log, sqrt, exp
from scipy.stats import norm


def d1(S, K, T, r, sigma):
    return (log(S / K) + (r + sigma ** 2 / 2.0) * T) / sigma * sqrt(T)


def d2(S, K, T, r, sigma):
    return d1(S, K, T, r, sigma) - sigma * sqrt(T)


def bs_call(S, K, T, r, sigma):
    return S * norm.cdf(d1(S, K, T, r, sigma)) - K * exp(-r * T) * norm.cdf(
        d2(S, K, T, r, sigma)
    )


def bs_put(S, K, T, r, sigma):
    return K * exp(-r * T) - S + bs_call(S, K, T, r, sigma)


# Option Greeks


def call_delta(S, K, T, r, sigma):
    return norm.cdf(d1(S, K, T, r, sigma))


def call_gamma(S, K, T, r, sigma):
    return norm.pdf(d1(S, K, T, r, sigma)) / (S * sigma * sqrt(T))


def call_vega(S, K, T, r, sigma):
    return 0.01 * (S * norm.pdf(d1(S, K, T, r, sigma)) * sqrt(T))


def call_theta(S, K, T, r, sigma):
    return 0.01 * (
        -(S * norm.pdf(d1(S, K, T, r, sigma)) * sigma) / (2 * sqrt(T))
        - r * K * exp(-r * T) * norm.cdf(d2(S, K, T, r, sigma))
    )


def call_rho(S, K, T, r, sigma):
    return 0.01 * (K * T * exp(-r * T) * norm.cdf(d2(S, K, T, r, sigma)))


def put_delta(S, K, T, r, sigma):
    return -norm.cdf(-d1(S, K, T, r, sigma))


def put_gamma(S, K, T, r, sigma):
    return norm.pdf(d1(S, K, T, r, sigma)) / (S * sigma * sqrt(T))


def put_vega(S, K, T, r, sigma):
    return 0.01 * (S * norm.pdf(d1(S, K, T, r, sigma)) * sqrt(T))


def put_theta(S, K, T, r, sigma):
    return 0.01 * (
        -(S * norm.pdf(d1(S, K, T, r, sigma)) * sigma) / (2 * sqrt(T))
        + r * K * exp(-r * T) * norm.cdf(-d2(S, K, T, r, sigma))
    )


def put_rho(S, K, T, r, sigma):
    return 0.01 * (-K * T * exp(-r * T) * norm.cdf(-d2(S, K, T, r, sigma)))


d1(100, 95, 1, 0.06, 0.3)
d2(100, 95, 1, 0.06, 0.3)
print(bs_call(100, 95, 1, 0.06, 0.3))
